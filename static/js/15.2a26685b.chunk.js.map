{"version":3,"file":"static/js/15.2a26685b.chunk.js","mappings":"ySAAMA,EAAM,mCAEL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oFACY,gDADZ,SAEUC,MAAM,GAAD,OADH,gDACG,oBAAsBF,IAAOG,MAAK,SAAAC,GAChD,OAAOA,EAASC,UAHjB,0GAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uEACY,4CADZ,SAEUL,MAAM,GAAD,OADH,4CACG,kBACKK,EADL,oBACqBP,EADrB,+CAEhBG,MAAK,SAAAC,GACH,OAAOA,EAASC,UALjB,0GASA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,6EACY,qCADZ,SAEoBP,MAAM,GAAD,OADb,qCACa,YAAcO,EAAd,oBAA4BT,IAFrD,YAEGI,EAFH,QAIUM,GAJV,yCAKQN,EAASC,QALjB,gCAOIM,QAAQC,OAAO,IAAIC,MAAM,iBAP7B,kEAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BL,GAA5B,uEACY,qCADZ,SAEUP,MAAM,GAAD,OADH,qCACG,YAAcO,EAAd,4BAAoCT,IAAOG,MACzD,SAAAC,GACI,OAAOA,EAASC,UAJrB,0GASA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA+BN,GAA/B,uEACY,qCADZ,SAEUP,MAAM,GAAD,OADH,qCACG,YACDO,EADC,4BACqBT,EADrB,2BAEhBG,MAAK,SAAAC,GACH,OAAOA,EAASC,UALjB,4G,yGClCQ,SAASW,EAAT,GAA8B,IAAXC,EAAU,EAAVA,OAC9B,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACNN,EAAAA,EAAAA,IAAgBE,GAAQd,MAAK,SAAAmB,GACzBF,EAAWE,EAAGC,cAEnB,CAACN,KAGA,8BACKE,EAAQK,OAAS,GACd,wBACKL,EAAQM,KAAI,gBAAGhB,EAAH,EAAGA,GAAIiB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACT,2BACI,2CAAiBD,MACjB,uBAAIC,MAFClB,SAOjB,yE","sources":["ApiService/ApiService.js","components/Reviews/Reviews.js"],"sourcesContent":["const KEY = '084d40a9fef3af2d63a3d640c3a032ce';\n\nexport async function GetTrending() {\n    const BasUpl = 'https://api.themoviedb.org/3/trending/all/day';\n    return await fetch(`${BasUpl}?api_key=${KEY}`).then(response => {\n        return response.json();\n    });\n}\n\nexport async function SearchMovies(name) {\n    const BasUpl = 'https://api.themoviedb.org/3/search/movie';\n    return await fetch(\n        `${BasUpl}?query=${name}&api_key=${KEY}&language=en-US&page=1&include_adult=false`\n    ).then(response => {\n        return response.json();\n    });\n}\n\nexport async function GetMovieDetails(id) {\n    const BasUpl = 'https://api.themoviedb.org/3/movie';\n    const response = await fetch(`${BasUpl}/${id}?api_key=${KEY}`);\n\n    if (response.ok) {\n        return response.json();\n    }\n    return Promise.reject(new Error(' Error: 404'));\n}\n\nexport async function GetMovieCast(id) {\n    const BasUpl = 'https://api.themoviedb.org/3/movie';\n    return await fetch(`${BasUpl}/${id}/credits?api_key=${KEY}`).then(\n        response => {\n            return response.json();\n        }\n    );\n}\n\nexport async function GetMovieReviews(id) {\n    const BasUpl = 'https://api.themoviedb.org/3/movie';\n    return await fetch(\n        `${BasUpl}/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n    ).then(response => {\n        return response.json();\n    });\n}\n","import React, { useEffect, useState } from 'react';\nimport { GetMovieReviews } from 'ApiService/ApiService';\n\nexport default function Reviews({ filmId }) {\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        GetMovieReviews(filmId).then(el => {\n            setReviews(el.results);\n        });\n    }, [filmId]);\n\n    return (\n        <>\n            {reviews.length > 0 ? (\n                <ul>\n                    {reviews.map(({ id, author, content }) => (\n                        <li key={id}>\n                            <h3>{`Author : ${author}`}</h3>\n                            <p>{content}</p>\n                        </li>\n                    ))}\n                </ul>\n            ) : (\n                <h3>We don't have any reviews for this movie</h3>\n            )}\n        </>\n    );\n}"],"names":["KEY","GetTrending","fetch","then","response","json","SearchMovies","name","GetMovieDetails","id","ok","Promise","reject","Error","GetMovieCast","GetMovieReviews","Reviews","filmId","useState","reviews","setReviews","useEffect","el","results","length","map","author","content"],"sourceRoot":""}